CHART NAME: {{ .Chart.Name }}
CHART VERSION: {{ .Chart.Version }}
APP VERSION: {{ .Chart.AppVersion }}

** Please be patient while the chart is being deployed **

{{- if or (not .Values.opensearch.hosts) (not .Values.opensearch.port) -}}
######################################################################################################
### ERROR: You did not provide the Opensearch external host or port in your 'helm install' call ###
######################################################################################################

Complete your Opensearch Dashboards deployment by running:

  helm upgrade --namespace {{ .Release.Namespace }} {{ .Release.Name }} doca/opensearch-dashboards \
    --set opensearch.hosts[0]=YOUR_OS_HOST,opensearch.port=YOUR_ES_PORT

Replacing "YOUR_ES_HOST" and "YOUR_OS_PORT" placeholders by the proper values of your opensearch deployment.

{{- else -}}
1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
  Get the Opensearch Dashboards URL and associate Opensearch Dashboards hostname to your cluster external IP:

   export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
   echo "Opensearch Dashboards URL: http{{ if .Values.ingress.tls }}s{{ end }}://{{ .Values.ingress.hostname }}/"
   echo "$CLUSTER_IP  {{ .Values.ingress.hostname }}" | sudo tee -a /etc/hosts

{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "common.names.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "common.names.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "common.names.fullname" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl port-forward svc/{{ include "common.names.fullname" . }} 8080:{{ .Values.service.port }}
{{- end }}

{{- include "opensearch-dashboards.validateValues" . }}
{{- include "opensearch-dashboards.checkRollingTags" . }}
{{- end }}
